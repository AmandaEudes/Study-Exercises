# Even Fibonacci Numbers
# Problem 2

# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.


def fibonacci_numbers(maximum: int) -> list[int]:
    """Generate Fibonacci sequence up to a maximum value.

    Args:
        maximum: The upper limit for Fibonacci numbers to generate

    Returns:
        List of Fibonacci numbers not exceeding the maximum value

    Raises:
        ValueError: If maximum is less than 1
    """
    if maximum < 1:
        raise ValueError("Only positive integers are allowed")
    if maximum == 1:
        return [1]
    numbers = [1, 2]
    next_value = 1 + 2
    while next_value <= maximum:
        numbers.append(next_value)
        next_value = numbers[-1] + numbers[-2]
    return numbers


def sum_even_numbers(numbers: list[int]) -> int:
    """Calculate the sum of even numbers in a list.

    Args:
        numbers: List of integers to filter and sum

    Returns:
        Sum of all even numbers in the input list
    """
    return sum([item for item in numbers if item % 2 == 0])
